/**
*
*Copyright 2010 OuterCurve Foundation
*
*Licensed under the Apache License, Version 2.0 (the "License");
*you may not use this file except in compliance with the License.
*You may obtain a copy of the License at
*
*http://www.apache.org/licenses/LICENSE-2.0
*
*Unless required by applicable law or agreed to in writing, software
*distributed under the License is distributed on an "AS IS" BASIS,
*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*See the License for the specific language governing permissions and
*limitations under the License.
*/
/**
* This code was generated by the tool 'odatagen'.
* Runtime Version:1.0
*
* Changes to this file may cause incorrect behavior and will be lost if
* the code is regenerated.
*/
#import "eventsEntities.h"
/**
 * @interface:Session
 * @key:SessionID
 */
@implementation eventsModel_Session
	@synthesize m_SessionID;
	@synthesize m_EventCode;
	@synthesize m_SessionCode;
	@synthesize m_SessionTypeCode;
	@synthesize m_Level;
	@synthesize m_Abstract;
	@synthesize m_PublishFlag;
	@synthesize m_Title;
	@synthesize m_Notes;
	@synthesize m_Room;
	@synthesize m_StartTime;
	@synthesize m_Duration;
	@synthesize m_Speakers;
	@synthesize m_Tags;
	@synthesize m_Files;
	@synthesize m_Tweets;

/**
 *Method to create an instance of Session
 */
+ (id) CreateSessionWithsessionid:(NSNumber *)aSessionID eventcode:(NSString *)aEventCode sessioncode:(NSString *)aSessionCode sessiontypecode:(NSString *)aSessionTypeCode publishflag:(ODataBool *)aPublishFlag title:(NSString *)aTitle
{
	eventsModel_Session *aSession = [[eventsModel_Session alloc]init];
	
	aSession.m_SessionID = aSessionID;

	
	aSession.m_EventCode = aEventCode;

	
	aSession.m_SessionCode = aSessionCode;

	
	aSession.m_SessionTypeCode = aSessionTypeCode;

	
	aSession.m_PublishFlag = aPublishFlag;

	
	aSession.m_Title = aTitle;

	return aSession;
}
/**
 * Initialising object for Session
 */
- (id) init
{
	self=[self initWithUri:nil];
	return self;
}

- (id) initWithUri:(NSString*)anUri 
{
	if(self=[super initWithUri:anUri])
	{
		[self setBaseURI:anUri];
		m_OData_hasStream.booleanvalue=NO;
		[m_OData_entityMap setObject:@"Speaker" forKey:@"Speakers"];
		[m_OData_entityMap setObject:@"Tag" forKey:@"Tags"];
		[m_OData_entityMap setObject:@"File" forKey:@"Files"];
		[m_OData_entityMap setObject:@"Tweet" forKey:@"Tweets"];
		mProperties *obj;
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.Int32" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:NO Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_SessionID"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.String" MaxLength:@"50" MinLength:@"" FixedLength:NO Nullable:NO Unicode:YES ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_EventCode"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.String" MaxLength:@"50" MinLength:@"" FixedLength:NO Nullable:NO Unicode:YES ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_SessionCode"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.String" MaxLength:@"50" MinLength:@"" FixedLength:NO Nullable:NO Unicode:YES ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_SessionTypeCode"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.Int16" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:YES Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_Level"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.String" MaxLength:@"Max" MinLength:@"" FixedLength:NO Nullable:YES Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"SyndicationSummary" FC_KeepInContent:NO FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_Abstract"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.Boolean" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:NO Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_PublishFlag"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.String" MaxLength:@"375" MinLength:@"" FixedLength:NO Nullable:NO Unicode:YES ConcurrencyMode:@"" FC_TargetPath:@"SyndicationTitle" FC_KeepInContent:NO FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_Title"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.String" MaxLength:@"Max" MinLength:@"" FixedLength:NO Nullable:YES Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_Notes"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.String" MaxLength:@"75" MinLength:@"" FixedLength:NO Nullable:YES Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_Room"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.DateTime" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:YES Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_StartTime"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.Int32" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:YES Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_Duration"];
		[obj release];
		
		[m_OData_entityFKRelation setObject:@"SessionSpeaker" forKey:@"Speaker"];
		[m_OData_entityFKRelation setObject:@"SessionTag" forKey:@"Tag"];
		[m_OData_entityFKRelation setObject:@"FK_File_Session" forKey:@"File"];
		[m_OData_entityFKRelation setObject:@"FK_Tweet_Session" forKey:@"Tweet"];

		NSMutableArray *anEntityKey=[[NSMutableArray alloc]init];
		[anEntityKey addObject:@"SessionID"];
		[m_OData_entityKey setObject:anEntityKey forKey:@"Session"];
		[anEntityKey release];
	}
	return self;
}

-(NSMutableArray *)getSyndicateArray
{
	NSMutableArray *syndicateArray=[[NSMutableArray alloc]init];
	[syndicateArray addObject:@"m_Abstract"];
	[syndicateArray addObject:@"m_Title"];
	
	return [syndicateArray autorelease];
}
-(eventsModel_Session *)getDeepCopy
{
	eventsModel_Session *obj=[[eventsModel_Session alloc]initWithUri:[self getBaseURI]];
	[obj setSessionID:[self getSessionID]];
	[obj setEventCode:[self getEventCode]];
	[obj setSessionCode:[self getSessionCode]];
	[obj setSessionTypeCode:[self getSessionTypeCode]];
	[obj setLevel:[self getLevel]];
	[obj setAbstract:[self getAbstract]];
	[obj setPublishFlag:[self getPublishFlag]];
	[obj setTitle:[self getTitle]];
	[obj setNotes:[self getNotes]];
	[obj setRoom:[self getRoom]];
	[obj setStartTime:[self getStartTime]];
	[obj setDuration:[self getDuration]];
	[obj setSpeakers:[self getSpeakers]];
	[obj setTags:[self getTags]];
	[obj setFiles:[self getFiles]];
	[obj setTweets:[self getTweets]];

	return [obj autorelease];
}
- (void) dealloc
{
	[m_SessionID release];
	m_SessionID = nil;
	[m_EventCode release];
	m_EventCode = nil;
	[m_SessionCode release];
	m_SessionCode = nil;
	[m_SessionTypeCode release];
	m_SessionTypeCode = nil;
	[m_Level release];
	m_Level = nil;
	[m_Abstract release];
	m_Abstract = nil;
	[m_PublishFlag release];
	m_PublishFlag = nil;
	[m_Title release];
	m_Title = nil;
	[m_Notes release];
	m_Notes = nil;
	[m_Room release];
	m_Room = nil;
	[m_StartTime release];
	m_StartTime = nil;
	[m_Duration release];
	m_Duration = nil;
	
	[m_Speakers release];
	m_Speakers = nil;
	[m_Tags release];
	m_Tags = nil;
	[m_Files release];
	m_Files = nil;
	[m_Tweets release];
	m_Tweets = nil;
	[super dealloc];
}

@end
/**
 * @interface:Speaker
 * @key:SpeakerID
 */
@implementation eventsModel_Speaker
	@synthesize m_SpeakerID;
	@synthesize m_Email;
	@synthesize m_FirstName;
	@synthesize m_LastName;
	@synthesize m_Bio;
	@synthesize m_PhotoUri;
	@synthesize m_Notes;
	@synthesize m_ExternalSpeaker;
	@synthesize m_Sessions;

/**
 *Method to create an instance of Speaker
 */
+ (id) CreateSpeakerWithspeakerid:(NSNumber *)aSpeakerID firstname:(NSString *)aFirstName lastname:(NSString *)aLastName externalspeaker:(ODataBool *)aExternalSpeaker
{
	eventsModel_Speaker *aSpeaker = [[eventsModel_Speaker alloc]init];
	
	aSpeaker.m_SpeakerID = aSpeakerID;

	
	aSpeaker.m_FirstName = aFirstName;

	
	aSpeaker.m_LastName = aLastName;

	
	aSpeaker.m_ExternalSpeaker = aExternalSpeaker;

	return aSpeaker;
}
/**
 * Initialising object for Speaker
 */
- (id) init
{
	self=[self initWithUri:nil];
	return self;
}

- (id) initWithUri:(NSString*)anUri 
{
	if(self=[super initWithUri:anUri])
	{
		[self setBaseURI:anUri];
		m_OData_hasStream.booleanvalue=YES;
		[m_OData_entityMap setObject:@"Session" forKey:@"Sessions"];
		mProperties *obj;
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.Int32" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:NO Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_SpeakerID"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.String" MaxLength:@"255" MinLength:@"" FixedLength:NO Nullable:YES Unicode:YES ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_Email"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.String" MaxLength:@"50" MinLength:@"" FixedLength:NO Nullable:NO Unicode:YES ConcurrencyMode:@"" FC_TargetPath:@"SyndicationTitle" FC_KeepInContent:NO FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_FirstName"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.String" MaxLength:@"50" MinLength:@"" FixedLength:NO Nullable:NO Unicode:YES ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_LastName"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.String" MaxLength:@"Max" MinLength:@"" FixedLength:NO Nullable:YES Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"SyndicationSummary" FC_KeepInContent:NO FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_Bio"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.String" MaxLength:@"255" MinLength:@"" FixedLength:NO Nullable:YES Unicode:YES ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_PhotoUri"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.String" MaxLength:@"Max" MinLength:@"" FixedLength:NO Nullable:YES Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_Notes"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.Boolean" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:NO Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_ExternalSpeaker"];
		[obj release];
		
		[m_OData_entityFKRelation setObject:@"SessionSpeaker" forKey:@"Session"];

		NSMutableArray *anEntityKey=[[NSMutableArray alloc]init];
		[anEntityKey addObject:@"SpeakerID"];
		[m_OData_entityKey setObject:anEntityKey forKey:@"Speaker"];
		[anEntityKey release];
	}
	return self;
}

-(NSMutableArray *)getSyndicateArray
{
	NSMutableArray *syndicateArray=[[NSMutableArray alloc]init];
	[syndicateArray addObject:@"m_FirstName"];
	[syndicateArray addObject:@"m_Bio"];
	
	return [syndicateArray autorelease];
}
-(eventsModel_Speaker *)getDeepCopy
{
	eventsModel_Speaker *obj=[[eventsModel_Speaker alloc]initWithUri:[self getBaseURI]];
	[obj setSpeakerID:[self getSpeakerID]];
	[obj setEmail:[self getEmail]];
	[obj setFirstName:[self getFirstName]];
	[obj setLastName:[self getLastName]];
	[obj setBio:[self getBio]];
	[obj setPhotoUri:[self getPhotoUri]];
	[obj setNotes:[self getNotes]];
	[obj setExternalSpeaker:[self getExternalSpeaker]];
	[obj setSessions:[self getSessions]];

	return [obj autorelease];
}
- (void) dealloc
{
	[m_SpeakerID release];
	m_SpeakerID = nil;
	[m_Email release];
	m_Email = nil;
	[m_FirstName release];
	m_FirstName = nil;
	[m_LastName release];
	m_LastName = nil;
	[m_Bio release];
	m_Bio = nil;
	[m_PhotoUri release];
	m_PhotoUri = nil;
	[m_Notes release];
	m_Notes = nil;
	[m_ExternalSpeaker release];
	m_ExternalSpeaker = nil;
	
	[m_Sessions release];
	m_Sessions = nil;
	[super dealloc];
}

@end
/**
 * @interface:Tag
 * @key:TagID
 */
@implementation eventsModel_Tag
	@synthesize m_TagID;
	@synthesize m_TagValue;
	@synthesize m_Sessions;

/**
 *Method to create an instance of Tag
 */
+ (id) CreateTagWithtagid:(NSNumber *)aTagID tagvalue:(NSString *)aTagValue
{
	eventsModel_Tag *aTag = [[eventsModel_Tag alloc]init];
	
	aTag.m_TagID = aTagID;

	
	aTag.m_TagValue = aTagValue;

	return aTag;
}
/**
 * Initialising object for Tag
 */
- (id) init
{
	self=[self initWithUri:nil];
	return self;
}

- (id) initWithUri:(NSString*)anUri 
{
	if(self=[super initWithUri:anUri])
	{
		[self setBaseURI:anUri];
		m_OData_hasStream.booleanvalue=NO;
		[m_OData_entityMap setObject:@"Session" forKey:@"Sessions"];
		mProperties *obj;
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.Int32" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:NO Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_TagID"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.String" MaxLength:@"100" MinLength:@"" FixedLength:NO Nullable:NO Unicode:YES ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_TagValue"];
		[obj release];
		
		[m_OData_entityFKRelation setObject:@"SessionTag" forKey:@"Session"];

		NSMutableArray *anEntityKey=[[NSMutableArray alloc]init];
		[anEntityKey addObject:@"TagID"];
		[m_OData_entityKey setObject:anEntityKey forKey:@"Tag"];
		[anEntityKey release];
	}
	return self;
}

-(NSMutableArray *)getSyndicateArray
{
	NSMutableArray *syndicateArray=[[NSMutableArray alloc]init];
	
	return [syndicateArray autorelease];
}
-(eventsModel_Tag *)getDeepCopy
{
	eventsModel_Tag *obj=[[eventsModel_Tag alloc]initWithUri:[self getBaseURI]];
	[obj setTagID:[self getTagID]];
	[obj setTagValue:[self getTagValue]];
	[obj setSessions:[self getSessions]];

	return [obj autorelease];
}
- (void) dealloc
{
	[m_TagID release];
	m_TagID = nil;
	[m_TagValue release];
	m_TagValue = nil;
	
	[m_Sessions release];
	m_Sessions = nil;
	[super dealloc];
}

@end
/**
 * @interface:File
 * @key:FileID
 */
@implementation eventsModel_File
	@synthesize m_FileID;
	@synthesize m_MimeType;
	@synthesize m_FileUri;
	@synthesize m_SessionID;
	@synthesize m_Session;

/**
 *Method to create an instance of File
 */
+ (id) CreateFileWithfileid:(NSNumber *)aFileID mimetype:(NSString *)aMimeType fileuri:(NSString *)aFileUri sessionid:(NSNumber *)aSessionID
{
	eventsModel_File *aFile = [[eventsModel_File alloc]init];
	
	aFile.m_FileID = aFileID;

	
	aFile.m_MimeType = aMimeType;

	
	aFile.m_FileUri = aFileUri;

	
	aFile.m_SessionID = aSessionID;

	return aFile;
}
/**
 * Initialising object for File
 */
- (id) init
{
	self=[self initWithUri:nil];
	return self;
}

- (id) initWithUri:(NSString*)anUri 
{
	if(self=[super initWithUri:anUri])
	{
		[self setBaseURI:anUri];
		m_OData_hasStream.booleanvalue=YES;
		[m_OData_entityMap setObject:@"Session" forKey:@"Session"];
		mProperties *obj;
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.Int32" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:NO Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_FileID"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.String" MaxLength:@"75" MinLength:@"" FixedLength:NO Nullable:NO Unicode:YES ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_MimeType"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.String" MaxLength:@"Max" MinLength:@"" FixedLength:NO Nullable:NO Unicode:YES ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_FileUri"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.Int32" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:NO Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_SessionID"];
		[obj release];
		
		[m_OData_entityFKRelation setObject:@"FK_File_Session" forKey:@"Session"];

		NSMutableArray *anEntityKey=[[NSMutableArray alloc]init];
		[anEntityKey addObject:@"FileID"];
		[m_OData_entityKey setObject:anEntityKey forKey:@"File"];
		[anEntityKey release];
	}
	return self;
}

-(NSMutableArray *)getSyndicateArray
{
	NSMutableArray *syndicateArray=[[NSMutableArray alloc]init];
	
	return [syndicateArray autorelease];
}
-(eventsModel_File *)getDeepCopy
{
	eventsModel_File *obj=[[eventsModel_File alloc]initWithUri:[self getBaseURI]];
	[obj setFileID:[self getFileID]];
	[obj setMimeType:[self getMimeType]];
	[obj setFileUri:[self getFileUri]];
	[obj setSessionID:[self getSessionID]];
	[obj setSession:[self getSession]];

	return [obj autorelease];
}
- (void) dealloc
{
	[m_FileID release];
	m_FileID = nil;
	[m_MimeType release];
	m_MimeType = nil;
	[m_FileUri release];
	m_FileUri = nil;
	[m_SessionID release];
	m_SessionID = nil;
	
	[m_Session release];
	m_Session = nil;
	[super dealloc];
}

@end
/**
 * @interface:Tweet
 * @key:TweetID
 * @key:SessionID
 */
@implementation eventsModel_Tweet
	@synthesize m_TweetID;
	@synthesize m_Author;
	@synthesize m_Text;
	@synthesize m_SessionID;
	@synthesize m_Session;

/**
 *Method to create an instance of Tweet
 */
+ (id) CreateTweetWithtweetid:(NSString *)aTweetID author:(NSString *)aAuthor text:(NSString *)aText sessionid:(NSNumber *)aSessionID
{
	eventsModel_Tweet *aTweet = [[eventsModel_Tweet alloc]init];
	
	aTweet.m_TweetID = aTweetID;

	
	aTweet.m_Author = aAuthor;

	
	aTweet.m_Text = aText;

	
	aTweet.m_SessionID = aSessionID;

	return aTweet;
}
/**
 * Initialising object for Tweet
 */
- (id) init
{
	self=[self initWithUri:nil];
	return self;
}

- (id) initWithUri:(NSString*)anUri 
{
	if(self=[super initWithUri:anUri])
	{
		[self setBaseURI:anUri];
		m_OData_hasStream.booleanvalue=NO;
		[m_OData_entityMap setObject:@"Session" forKey:@"Session"];
		mProperties *obj;
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.String" MaxLength:@"20" MinLength:@"" FixedLength:NO Nullable:NO Unicode:YES ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_TweetID"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.String" MaxLength:@"255" MinLength:@"" FixedLength:NO Nullable:NO Unicode:YES ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_Author"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.String" MaxLength:@"2048" MinLength:@"" FixedLength:NO Nullable:NO Unicode:YES ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_Text"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.Int32" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:NO Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_SessionID"];
		[obj release];
		
		[m_OData_entityFKRelation setObject:@"FK_Tweet_Session" forKey:@"Session"];

		NSMutableArray *anEntityKey=[[NSMutableArray alloc]init];
		[anEntityKey addObject:@"TweetID"];
		[anEntityKey addObject:@"SessionID"];
		[m_OData_entityKey setObject:anEntityKey forKey:@"Tweet"];
		[anEntityKey release];
	}
	return self;
}

-(NSMutableArray *)getSyndicateArray
{
	NSMutableArray *syndicateArray=[[NSMutableArray alloc]init];
	
	return [syndicateArray autorelease];
}
-(eventsModel_Tweet *)getDeepCopy
{
	eventsModel_Tweet *obj=[[eventsModel_Tweet alloc]initWithUri:[self getBaseURI]];
	[obj setTweetID:[self getTweetID]];
	[obj setAuthor:[self getAuthor]];
	[obj setText:[self getText]];
	[obj setSessionID:[self getSessionID]];
	[obj setSession:[self getSession]];

	return [obj autorelease];
}
- (void) dealloc
{
	[m_TweetID release];
	m_TweetID = nil;
	[m_Author release];
	m_Author = nil;
	[m_Text release];
	m_Text = nil;
	[m_SessionID release];
	m_SessionID = nil;
	
	[m_Session release];
	m_Session = nil;
	[super dealloc];
}

@end

 
/**
 * Container interface eventsEntities, Namespace: eventsModel
 */
@implementation eventsEntities 

	@synthesize m_OData_etag;

	@synthesize m_Sessions;
	@synthesize m_Speakers;
	@synthesize m_Tags;
	@synthesize m_Files;
	@synthesize m_Tweets;
/**
 * The initializer for eventsEntities accepting service URI
 */
- (id) init
{
	NSString* tmpuri =[[NSString alloc]initWithString:DEFAULT_SERVICE_URL];
	self=[self initWithUri:tmpuri credential:nil];
	[tmpuri release];
	return self;
}

- (id) initWithUri:(NSString*)anUri credential:(id)acredential
{
	NSString* tmpuri=nil;
	if([anUri length]==0)
	{
	 	tmpuri = DEFAULT_SERVICE_URL;
	}
	else
	{
		tmpuri =[NSString stringWithString:anUri];
	}
	if(![tmpuri hasSuffix:@"/"])
	{
		tmpuri=[tmpuri stringByAppendingString:@"/"];
	}

	if(self=[super initWithUri:tmpuri credentials:acredential dataServiceVersion:DataServiceVersion])
	{
		[super setServiceNamespace:@"eventsModel"];

		NSMutableArray* tempEntities=[[NSMutableArray alloc]init];
		
		[tempEntities addObject:@"Sessions"];
		[tempEntities addObject:@"Speakers"];
		[tempEntities addObject:@"Tags"];
		[tempEntities addObject:@"Files"];
		[tempEntities addObject:@"Tweets"];

		if([tempEntities count] > 0 )
		{
			[super setEntitiesWithArray:tempEntities];
		}
		[tempEntities release];

		NSMutableArray* tempEntitiySetKey=[[NSMutableArray alloc]init];
		
		[tempEntitiySetKey addObject:@"sessions"];
		[tempEntitiySetKey addObject:@"speakers"];
		[tempEntitiySetKey addObject:@"tags"];
		[tempEntitiySetKey addObject:@"files"];
		[tempEntitiySetKey addObject:@"tweets"];

		NSMutableArray* tempEntitiyTypeobj=[[NSMutableArray alloc]init];
		
		[tempEntitiyTypeobj addObject:@"Session"];
		[tempEntitiyTypeobj addObject:@"Speaker"];
		[tempEntitiyTypeobj addObject:@"Tag"];
		[tempEntitiyTypeobj addObject:@"File"];
		[tempEntitiyTypeobj addObject:@"Tweet"];

		if( ( [tempEntitiySetKey count] > 0 ) && ( [tempEntitiyTypeobj count] > 0 ) )
		{
			[super setEntitySet2TypeWithObject:tempEntitiyTypeobj forKey:tempEntitiySetKey];

		}

		[tempEntitiySetKey release];
		[ tempEntitiyTypeobj release];

		NSMutableArray* tempEntitiyTypeKey=[[NSMutableArray alloc]init];
		
		[tempEntitiyTypeKey addObject:@"session"];
		[tempEntitiyTypeKey addObject:@"speaker"];
		[tempEntitiyTypeKey addObject:@"tag"];
		[tempEntitiyTypeKey addObject:@"file"];
		[tempEntitiyTypeKey addObject:@"tweet"];
		NSMutableArray* tempEntitySetObj=[[NSMutableArray alloc]init];
		
		[tempEntitySetObj addObject:@"Sessions"];
		[tempEntitySetObj addObject:@"Speakers"];
		[tempEntitySetObj addObject:@"Tags"];
		[tempEntitySetObj addObject:@"Files"];
		[tempEntitySetObj addObject:@"Tweets"];

		if( ( [tempEntitiyTypeKey count] > 0 ) && ( [tempEntitySetObj count] > 0 ) )
		{
			[super setEntityType2SetWithObject:tempEntitySetObj forKey:tempEntitiyTypeKey];

		}
    	[tempEntitiyTypeKey release];
		[tempEntitySetObj release];

		NSMutableArray* foreignKeys=[[NSMutableArray alloc]init];		
		[foreignKeys addObject:@"SessionSpeaker"];
		[foreignKeys addObject:@"SessionTag"];
		[foreignKeys addObject:@"FK_File_Session"];
		[foreignKeys addObject:@"FK_Tweet_Session"];

		NSMutableArray *arrOfDictionaries=[[NSMutableArray alloc]initWithCapacity:[foreignKeys count]];

		NSMutableArray *arr;
 
		arr=[[NSMutableArray alloc]init];
		[arr addObject:[[[NSDictionary alloc]initWithObjectsAndKeys:@"Session",@"EndRole",@"Session",@"Type",@"*",@"Multiplicity",nil] autorelease]];
		[arr addObject:[[[NSDictionary alloc]initWithObjectsAndKeys:@"Speaker",@"EndRole",@"Speaker",@"Type",@"*",@"Multiplicity",nil] autorelease]];
		[arrOfDictionaries addObject:arr];
		[arr release];


		arr=[[NSMutableArray alloc]init];
		[arr addObject:[[[NSDictionary alloc]initWithObjectsAndKeys:@"Session",@"EndRole",@"Session",@"Type",@"*",@"Multiplicity",nil] autorelease]];
		[arr addObject:[[[NSDictionary alloc]initWithObjectsAndKeys:@"Tag",@"EndRole",@"Tag",@"Type",@"*",@"Multiplicity",nil] autorelease]];
		[arrOfDictionaries addObject:arr];
		[arr release];


		arr=[[NSMutableArray alloc]init];
		[arr addObject:[[[NSDictionary alloc]initWithObjectsAndKeys:@"Session",@"EndRole",@"Session",@"Type",@"1",@"Multiplicity",nil] autorelease]];
		[arr addObject:[[[NSDictionary alloc]initWithObjectsAndKeys:@"File",@"EndRole",@"File",@"Type",@"*",@"Multiplicity",nil] autorelease]];
		[arrOfDictionaries addObject:arr];
		[arr release];


		arr=[[NSMutableArray alloc]init];
		[arr addObject:[[[NSDictionary alloc]initWithObjectsAndKeys:@"Session",@"EndRole",@"Session",@"Type",@"1",@"Multiplicity",nil] autorelease]];
		[arr addObject:[[[NSDictionary alloc]initWithObjectsAndKeys:@"Tweet",@"EndRole",@"Tweet",@"Type",@"*",@"Multiplicity",nil] autorelease]];
		[arrOfDictionaries addObject:arr];
		[arr release];

		if( ( [foreignKeys count] > 0 ) && ( [arrOfDictionaries count] > 0 ) )
		{
			[super setAssociationforObjects:arrOfDictionaries forKeys:foreignKeys];
		}
		[foreignKeys release];
		[arrOfDictionaries release];

		m_Sessions = [[DataServiceQuery alloc]initWithUri:@"Sessions" objectContext: self];
		m_Speakers = [[DataServiceQuery alloc]initWithUri:@"Speakers" objectContext: self];
		m_Tags = [[DataServiceQuery alloc]initWithUri:@"Tags" objectContext: self];
		m_Files = [[DataServiceQuery alloc]initWithUri:@"Files" objectContext: self];
		m_Tweets = [[DataServiceQuery alloc]initWithUri:@"Tweets" objectContext: self];
		
	}
	return self;
}


/**
 * Method returns DataServiceQuery reference for
 * the entityset Sessions
 */
- (id) sessions
{
	[self.m_Sessions clearAllOptions];
	return self.m_Sessions;
}

/**
 * Method returns DataServiceQuery reference for
 * the entityset Speakers
 */
- (id) speakers
{
	[self.m_Speakers clearAllOptions];
	return self.m_Speakers;
}

/**
 * Method returns DataServiceQuery reference for
 * the entityset Tags
 */
- (id) tags
{
	[self.m_Tags clearAllOptions];
	return self.m_Tags;
}

/**
 * Method returns DataServiceQuery reference for
 * the entityset Files
 */
- (id) files
{
	[self.m_Files clearAllOptions];
	return self.m_Files;
}

/**
 * Method returns DataServiceQuery reference for
 * the entityset Tweets
 */
- (id) tweets
{
	[self.m_Tweets clearAllOptions];
	return self.m_Tweets;
}

/**
 * Methods for adding object to the entityset/collection
 */

- (void) addToSessions:(id)anObject
{
	[super addObject:@"Sessions" object:anObject];
}

- (void) addToSpeakers:(id)anObject
{
	[super addObject:@"Speakers" object:anObject];
}

- (void) addToTags:(id)anObject
{
	[super addObject:@"Tags" object:anObject];
}

- (void) addToFiles:(id)anObject
{
	[super addObject:@"Files" object:anObject];
}

- (void) addToTweets:(id)anObject
{
	[super addObject:@"Tweets" object:anObject];
}

- (void) dealloc
{
	[ m_OData_etag release];
	m_OData_etag = nil;
	
	[m_Sessions release];
	m_Sessions = nil;
	[m_Speakers release];
	m_Speakers = nil;
	[m_Tags release];
	m_Tags = nil;
	[m_Files release];
	m_Files = nil;
	[m_Tweets release];
	m_Tweets = nil;

	[super dealloc];
}

@end
